apply plugin: 'artifactory'

version = '1.6.0-SNAPSHOT'

ext {
    decimal = false
    genDir = file('src/gen/java')
    dictDir = file('src/main/dicts')
}

archivesBaseName = "quickfixj-core"

// Change default project layout
sourceSets {
    main {
        java {
            srcDir genDir
        }
    }
    test {
        resources {
            srcDir "${dictDir}"
        }
    }
}

dependencies {
    if (incremental_build) {
        compile 'com.exactprosystems.testtools:apache-mina-core:2.0.9-SNAPSHOT'
        provided 'com.exactprosystems.testtools:quickfixj-code-generator:1.6.0-SNAPSHOT'
    } else {
        compile project(':BackEnd:apache-mina-core-2.0.9')
        provided project(':BackEnd:Quickfixj-1.6.0:quickfixj-codegenerator')
    }

    compile "org.slf4j:slf4j-api:${version_slf4j}"
    //Transitive dependencies should be enable for using JdbcStore
    compile group: 'com.cloudhopper.proxool', name: 'proxool', version: '0.9.1', transitive: false

    //compile 'org.apache.avalon.framework:avalon-framework-api:4.3.1'

    //Using for SleepycatStore
    compile 'berkeleydb:je:2.1.30'

    testCompile 'junit:junit:4.10'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.hsqldb:hsqldb:2.3.2'
}

task generateMessage {
	inputs.dir dictDir
	outputs.dir genDir

    doLast {
        println "###############################################"
        println "Currency will be treated as BigDecimal = ${decimal}"
        println "###############################################"

        javaexec {
            classpath sourceSets.main.runtimeClasspath
            main 'org.quickfixj.codegenerator.MessageCodeGenerator'
            args = ["${dictDir}", './', genDir]
            jvmArgs = ["-Dgenerator.decimal=${decimal}"]
        }
    }
}

compileJava.dependsOn.add('generateMessage')

clean {
    delete 'src/gen'
}

test {
    ignoreFailures = true

    jvmArgs '-XX:MaxPermSize=128m'

    systemProperties 'atest.heartbeat' : '5'
    systemProperties 'atest.timeout' : '60000'
    systemProperties 'atest.reconnectDelay' : '5'

    include '**/*Test.class'
    include '**/AcceptanceTestSuite.class'

    exclude '**/*ForTest.class'
    exclude '**/Abstract*Test.class'
    exclude '**/AcceptanceTestSuite$*'

    println "Test args ${allJvmArgs}"
    //uncomment for logging test time
    /*afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}. Time: ${(result.endTime - result.startTime)/1000}s"
    }*/
    testLogging.showStandardStreams = true
}
